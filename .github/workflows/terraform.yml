name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: "Terraform action"
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: projects/fintech/${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        run: terraform init    

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run:  terraform plan -var-file="${{ github.event.inputs.environment }}.tfvars"  

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve -var="env=${{ github.event.inputs.environment }}" -var-file="${{ github.event.inputs.environment }}.tfvars"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve -var="env=${{ github.event.inputs.environment }}" -var-file="${{ github.event.inputs.environment }}.tfvars"
      - name: Install kubectl
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
         set -e
         VERSION="$(curl -s https://dl.k8s.io/release/stable.txt)"
         echo "Got Kubernetes version: $VERSION"
         if [ -z "$VERSION" ]; then
           echo "Failed to fetch stable.txt"
           exit 1
         fi
         curl -LO "https://dl.k8s.io/release/${VERSION}/bin/linux/amd64/kubectl"
         chmod +x kubectl
         sudo mv kubectl /usr/local/bin/kubectl

      # Capture Terraform outputs (like cluster_name, region)
      - name: Capture Terraform outputs
        if: ${{ github.event.inputs.action == 'apply' }}
        id: tf_outputs
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "CLUSTER_REGION=$(terraform output -raw cluster_region 2>/dev/null || echo ${{ secrets.AWS_REGION }})" >> $GITHUB_ENV

      # Update kubeconfig so kubectl can talk to cluster
      - name: Update kubeconfig
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.CLUSTER_REGION }} \
            --name ${{ env.CLUSTER_NAME }}

      # Quick check that cluster is up and nodes are joining
      - name: Verify EKS cluster
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          kubectl cluster-info
          kubectl get nodes -o wide || true